{"version":3,"sources":["utils/fetchClient.ts","types/SortType.ts","api/users.ts","components/Auth/AuthForm.tsx","components/Auth/AuthContext.tsx","components/ErrorNotification.tsx","components/Footer.tsx","components/ItemBeforeAdding.tsx","components/TodoItem.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","SortType","client","getUserByEmail","email","a","users","createUser","name","AuthForm","onLogin","useState","setEmail","setName","needToRegister","setNeedToRegister","loading","setLoading","errorMessage","setErrorMessage","saveUser","user","localStorage","setItem","useEffect","userData","getItem","parse","error","loadUser","handleSubmit","event","preventDefault","onSubmit","className","htmlFor","classNames","type","id","placeholder","disabled","value","required","onChange","e","target","minLength","AuthContext","React","createContext","AuthProvider","children","setUser","Provider","ErrorNotification","props","errorMsgTodo","hasLoadingTodoError","hasDeleteTodoError","hasUpdateTodoError","hideErrors","toHideErrors","data-cy","hidden","onClick","Footer","countOfActiveTodo","countOfDoneTodo","removeAllDoneTodo","sortType","sortingTodos","href","selected","all","active","completed","ItemBeforeAdding","text","TodoItem","memo","todo","removeOneTodo","hasUpdateError","isRemoving","isRemovingAll","updateStateTodos","isLoading","setIsLoading","deletedItem","setDeletedItem","isDoubleClicked","setIsDoubleClicked","title","changedTodoValue","setChangedTodoValue","updateOneTodoTitle","item","catch","finally","updateTodoField","useRef","current","focus","defaultChecked","res","ref","onKeyDown","key","onBlur","onDoubleClick","App","useContext","newTodoField","todos","setTodos","inputDataOfTodo","setInputDataOfTodo","setIsLoadind","setErrorMsgTodo","setSortType","setHideErrors","setHasLoadingTodoError","setHasUpdateTodoError","setHasDeleteTodoError","isRemoveOneTodoLoading","setIsRemoveOneTodoLoading","isRemovingAllDone","setIsRemovingAllDone","closeErrors","useCallback","userId","map","preparedTodosToShow","filter","sort","areAllCompleted","every","forEach","canAdd","trim","updateAllTodos","updatedTodos","prev","prevTodo","condition","onKeyUp","todoFromServer","length","Root","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.f47f9f1b.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: <T>(url: string) => request<T>(url, 'DELETE'),\n};\n","// eslint-disable-next-line no-shadow\nexport enum SortType {\n  all,\n  completed,\n  active,\n}\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserByEmail = async (email: string) => {\n  const users = await client.get<User[]>(`/users?email=${email}`);\n\n  return users[0] || null;\n};\n\ntype UserData = Pick<User, 'name' | 'email'>;\n\nexport const createUser = async ({ email, name }: UserData) => {\n  return client.post<User>('/users', { email, name });\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { createUser, getUserByEmail } from '../../api/users';\nimport { User } from '../../types/User';\n\nexport type Props = {\n  onLogin: (user: User) => void,\n};\n\nexport const AuthForm: React.FC<Props> = ({ onLogin }) => {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [needToRegister, setNeedToRegister] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const saveUser = (user: User) => {\n    localStorage.setItem('user', JSON.stringify(user));\n    onLogin(user);\n  };\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user');\n\n    if (!userData) {\n      return;\n    }\n\n    try {\n      const user = JSON.parse(userData) as User;\n\n      onLogin(user);\n    } catch (error) {\n      // Need to login\n    }\n  }, []);\n\n  const loadUser = async () => {\n    const user = await getUserByEmail(email);\n\n    if (user) {\n      saveUser(user);\n    } else {\n      setNeedToRegister(true);\n    }\n  };\n\n  const registerUser = () => {\n    return createUser({ name, email })\n      .then(saveUser);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrorMessage('');\n    setLoading(true);\n\n    try {\n      if (needToRegister) {\n        await registerUser();\n      } else {\n        await loadUser();\n      }\n    } catch (error) {\n      setErrorMessage('Something went wrtong');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"box mt-5\">\n      <h1 className=\"title is-3\">\n        {needToRegister ? 'You need to register' : 'Log in to open todos'}\n      </h1>\n\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"user-email\">\n          Email\n        </label>\n\n        <div\n          className={classNames('control has-icons-left', {\n            'is-loading': loading,\n          })}\n        >\n          <input\n            type=\"email\"\n            id=\"user-email\"\n            className={classNames('input', {\n              'is-danger': !needToRegister && errorMessage,\n            })}\n            placeholder=\"Enter your email\"\n            disabled={loading || needToRegister}\n            value={email}\n            required\n            onChange={e => setEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n        </div>\n\n        {!needToRegister && errorMessage && (\n          <p className=\"help is-danger\">{errorMessage}</p>\n        )}\n      </div>\n\n      {needToRegister && (\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"user-name\">\n            Your Name\n          </label>\n\n          <div\n            className={classNames('control has-icons-left', {\n              'is-loading': loading,\n            })}\n          >\n            <input\n              type=\"text\"\n              id=\"user-name\"\n              className={classNames('input', {\n                'is-danger': needToRegister && errorMessage,\n              })}\n              placeholder=\"Enter your name\"\n              required\n              minLength={4}\n              disabled={loading}\n              value={name}\n              onChange={e => setName(e.target.value)}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-user\" />\n            </span>\n          </div>\n\n          {needToRegister && errorMessage && (\n            <p className=\"help is-danger\">{errorMessage}</p>\n          )}\n        </div>\n      )}\n\n      <div className=\"field\">\n        <button\n          type=\"submit\"\n          className={classNames('button is-primary', {\n            'is-loading': loading,\n          })}\n        >\n          {needToRegister ? 'Register' : 'Login'}\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../../types/User';\nimport { AuthForm } from './AuthForm';\n\nexport const AuthContext = React.createContext<User | null>(null);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const AuthProvider: React.FC<Props> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  if (!user) {\n    return <AuthForm onLogin={setUser} />;\n  }\n\n  return (\n    <AuthContext.Provider value={user}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  errorMsgTodo: boolean;\n  hasLoadingTodoError: boolean;\n  hasDeleteTodoError: boolean;\n  hasUpdateTodoError: boolean;\n  hideErrors: boolean;\n  toHideErrors: () => void;\n};\n\nexport const ErrorNotification: React.FC<Props> = (props) => {\n  const {\n    errorMsgTodo,\n    hasLoadingTodoError,\n    hasDeleteTodoError,\n    hasUpdateTodoError,\n    hideErrors,\n    toHideErrors,\n  } = props;\n\n  return (\n    <div\n      data-cy=\"ErrorNotification\"\n      className={classNames(\n        'notification', 'is-danger', 'is-light', 'has-text-weight-normal',\n        { hidden: hideErrors },\n      )}\n    >\n      <button\n        data-cy=\"HideErrorButton\"\n        type=\"button\"\n        className=\"delete\"\n        onClick={toHideErrors}\n      />\n      { errorMsgTodo && <>Title can&#39;t be empty</>}\n      {hasLoadingTodoError && <>Unable to add a todo</>}\n      <br />\n      {hasDeleteTodoError && <>Unable to delete a todo</>}\n      <br />\n      {hasUpdateTodoError && <>Unable to update a todo</>}\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { SortType } from '../types/SortType';\n\ntype Props = {\n  countOfActiveTodo: number;\n  countOfDoneTodo: number;\n  removeAllDoneTodo: () => void;\n  sortType: SortType;\n  sortingTodos: (sort: SortType) => void;\n};\n\nexport const Footer: React.FC<Props> = (props) => {\n  const {\n    countOfActiveTodo,\n    countOfDoneTodo,\n    removeAllDoneTodo,\n    sortType,\n    sortingTodos,\n  } = props;\n\n  return (\n    <footer className=\"todoapp__footer\" data-cy=\"Footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {`${countOfActiveTodo} items left`}\n      </span>\n\n      <nav className=\"filter\" data-cy=\"Filter\">\n        <a\n          data-cy=\"FilterLinkAll\"\n          href=\"#/\"\n          className={classNames(\n            'filter__link', { selected: sortType === SortType.all },\n          )}\n          onClick={() => sortingTodos(SortType.all)}\n        >\n          All\n        </a>\n\n        <a\n          data-cy=\"FilterLinkActive\"\n          href=\"#/active\"\n          className={classNames(\n            'filter__link', { selected: sortType === SortType.active },\n          )}\n          onClick={() => sortingTodos(SortType.active)}\n        >\n          Active\n        </a>\n        <a\n          data-cy=\"FilterLinkCompleted\"\n          href=\"#/completed\"\n          className={classNames(\n            'filter__link', { selected: sortType === SortType.completed },\n          )}\n          onClick={() => sortingTodos(SortType.completed)}\n        >\n          Completed\n        </a>\n      </nav>\n\n      <button\n        data-cy=\"ClearCompletedButton\"\n        type=\"button\"\n        className={classNames(\n          'todoapp__clear-completed',\n          { 'is-invisible': countOfDoneTodo === 0 },\n        )}\n        onClick={removeAllDoneTodo}\n      >\n        Clear completed\n      </button>\n\n    </footer>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\n\ntype Props = {\n  text: string;\n};\n\nexport const ItemBeforeAdding: React.FC<Props> = (props) => {\n  const { text } = props;\n\n  return (\n    <div\n      data-cy=\"Todo\"\n      className=\"todo\"\n    >\n      <label className=\"todo__status-label\">\n        <input\n          data-cy=\"TodoStatus\"\n          type=\"checkbox\"\n          className=\"todo__status\"\n        />\n      </label>\n\n      <span\n        data-cy=\"TodoTitle\"\n        className=\"todo__title\"\n      >\n        {text}\n      </span>\n      <button\n        type=\"button\"\n        className=\"todo__remove\"\n        data-cy=\"TodoDeleteButton\"\n      >\n        ×\n      </button>\n\n      <div data-cy=\"TodoLoader\" className=\"modal overlay is-active\">\n        <div className=\"modal-background has-background-white-ter\" />\n        <div className=\"loader\" />\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  todo: Todo;\n  removeOneTodo: (id: number) => void;\n  hasUpdateError: (condition: boolean) => void;\n  isRemoving: boolean;\n  isRemovingAll: boolean;\n  updateStateTodos: (todo: Todo) => void;\n};\n\nexport const TodoItem: React.FC<Props> = React.memo((props) => {\n  const {\n    todo,\n    removeOneTodo,\n    hasUpdateError,\n    isRemoving,\n    isRemovingAll,\n    updateStateTodos,\n  } = props;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [deletedItem, setDeletedItem] = useState(0);\n  const [isDoubleClicked, setIsDoubleClicked] = useState(false);\n  const [changedTodoValue, setChangedTodoValue] = useState(todo.title);\n\n  const updateOneTodoCompleted = (item: Todo) => {\n    setIsLoading(true);\n    client.patch<Todo>(`/todos/${item.id}`, {\n      completed: !item.completed,\n    })\n      .then(res => updateStateTodos(res))\n      .catch(() => hasUpdateError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  const updateOneTodoTitle = (item: Todo) => {\n    setIsLoading(true);\n    client.patch<Todo>(`/todos/${item.id}`, {\n      title: changedTodoValue,\n    })\n      .catch(() => hasUpdateError(true))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const changeValueOfTodoWithEnter = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter'\n    && changedTodoValue !== ''\n    && changedTodoValue !== todo.title) {\n      updateOneTodoTitle(todo);\n      setIsDoubleClicked(false);\n    } else if ((event.key === 'Enter' && changedTodoValue !== '')\n    || event.key === 'Escape') {\n      setIsDoubleClicked(false);\n    }\n  };\n\n  const changeValueOfTodoWithBlur = () => {\n    if (changedTodoValue !== ''\n    && changedTodoValue !== todo.title) {\n      updateOneTodoTitle(todo);\n    }\n\n    setIsDoubleClicked(false);\n  };\n\n  const updateTodoField = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (updateTodoField.current) {\n      updateTodoField.current.focus();\n    }\n  }, [isDoubleClicked]);\n\n  return (\n    <div\n      data-cy=\"Todo\"\n      className={classNames('todo', { completed: todo.completed })}\n    >\n      <label className=\"todo__status-label\">\n        <input\n          data-cy=\"TodoStatus\"\n          type=\"checkbox\"\n          className=\"todo__status\"\n          defaultChecked={todo.completed}\n          onClick={() => updateOneTodoCompleted(todo)}\n        />\n      </label>\n\n      {isDoubleClicked\n        ? (\n          <form\n            onSubmit={(event) => event.preventDefault()}\n          >\n            <input\n              data-cy=\"TodoTitleField\"\n              type=\"text\"\n              className=\"todo__title-field\"\n              // placeholder={changedTodoValue}\n              value={changedTodoValue}\n              ref={updateTodoField}\n              onChange={(event) => {\n                setChangedTodoValue(event.target.value);\n              }}\n              onKeyDown={changeValueOfTodoWithEnter}\n              onBlur={changeValueOfTodoWithBlur}\n            />\n          </form>\n        )\n        : (\n          <>\n            <span\n              data-cy=\"TodoTitle\"\n              className=\"todo__title\"\n              onDoubleClick={() => {\n                setIsDoubleClicked(true);\n              }}\n            >\n              {changedTodoValue}\n            </span>\n            <button\n              type=\"button\"\n              className=\"todo__remove\"\n              data-cy=\"TodoDeleteButton\"\n              onClick={() => {\n                removeOneTodo(todo.id);\n                setDeletedItem(todo.id);\n              }}\n            >\n              ×\n            </button>\n          </>\n        )}\n\n      {((isLoading\n        || (isRemoving && deletedItem === todo.id))\n        || (isRemovingAll && todo.completed))\n        && (\n          <div data-cy=\"TodoLoader\" className=\"modal overlay is-active\">\n            <div className=\"modal-background has-background-white-ter\" />\n            <div className=\"loader\" />\n          </div>\n        )}\n    </div>\n  );\n});\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport classNames from 'classnames';\nimport React, {\n  useCallback,\n  useContext, useEffect, useRef, useState,\n} from 'react';\nimport { getTodos } from './api/todos';\nimport { AuthContext } from './components/Auth/AuthContext';\nimport { ErrorNotification } from './components/ErrorNotification';\nimport { Footer } from './components/Footer';\nimport { ItemBeforeAdding } from './components/ItemBeforeAdding';\nimport { TodoItem } from './components/TodoItem';\nimport { SortType } from './types/SortType';\nimport { Todo } from './types/Todo';\nimport { client } from './utils/fetchClient';\n\nexport const App: React.FC = () => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const user = useContext(AuthContext);\n  const newTodoField = useRef<HTMLInputElement>(null);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [inputDataOfTodo, setInputDataOfTodo] = useState('');\n\n  const [isLoading, setIsLoadind] = useState(false);\n\n  const [errorMsgTodo, setErrorMsgTodo] = useState(false);\n\n  const [sortType, setSortType] = useState(SortType.all);\n\n  const [hideErrors, setHideErrors] = useState(true);\n  const [hasLoadingTodoError, setHasLoadingTodoError] = useState(false);\n  const [hasUpdateTodoError, setHasUpdateTodoError] = useState(false);\n  const [hasDeleteTodoError, setHasDeleteTodoError] = useState(false);\n\n  const [isRemoveOneTodoLoading, setIsRemoveOneTodoLoading] = useState(false);\n  const [isRemovingAllDone, setIsRemovingAllDone] = useState(false);\n\n  const closeErrors = useCallback(() => {\n    setTimeout(() => setHideErrors(true), 3000);\n  }, []);\n\n  useEffect(() => {\n    // focus the element with `ref={newTodoField}`\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n\n    if (user) {\n      getTodos(user.id)\n        .then(res => setTodos(res.map(todo => ({\n          id: todo.id,\n          userId: todo.userId,\n          title: todo.title,\n          completed: todo.completed,\n        }))))\n        .catch(() => setHasLoadingTodoError(true));\n    }\n  }, []);\n\n  let preparedTodosToShow: Todo[] = [...todos];\n\n  switch (sortType) {\n    case SortType.completed:\n      preparedTodosToShow = todos.filter(todo => todo.completed === true);\n      break;\n\n    case SortType.active:\n      preparedTodosToShow = todos.filter(todo => todo.completed === false);\n      break;\n\n    case SortType.all:\n    default:\n      break;\n  }\n\n  const sortingTodos = useCallback((sort: SortType) => {\n    setSortType(sort);\n  }, []);\n\n  const areAllCompleted = todos.every(todo => todo.completed === true);\n  let countOfActiveTodo = 0;\n  let countOfDoneTodo = 0;\n\n  todos.forEach((item) => {\n    if (!item.completed) {\n      countOfActiveTodo += 1;\n    } else {\n      countOfDoneTodo += 1;\n    }\n  });\n\n  const canAdd = user !== null && inputDataOfTodo.trim() !== '' && !isLoading;\n\n  const addingTodoToList = (event: React.KeyboardEvent) => {\n    if (\n      event.key === 'Enter' && user && inputDataOfTodo.trim() === '') {\n      setErrorMsgTodo(true);\n      setHideErrors(false);\n      closeErrors();\n    } else if (\n      event.key === 'Enter' && canAdd && user !== null) {\n      setIsLoadind(true);\n      client.post<Todo>('/todos', {\n        title: inputDataOfTodo,\n        userId: user.id,\n        completed: false,\n      })\n        .then(res => {\n          const todoFromServer: Todo = {\n            id: res.id,\n            userId: res.userId,\n            title: res.title,\n            completed: res.completed,\n          };\n\n          setTodos(prev => [...prev, todoFromServer]);\n        })\n        .catch(() => {\n          setHasLoadingTodoError(true);\n          setHideErrors(false);\n          closeErrors();\n        })\n        .finally(() => {\n          setInputDataOfTodo('');\n          setIsLoadind(false);\n        });\n    }\n  };\n\n  const updateAllTodos = async () => {\n    const updatedTodos = await Promise.all(\n      todos.map((todo) => client.patch<Todo>(`/todos/${todo.id}`, { completed: !areAllCompleted })),\n    );\n\n    setTodos(updatedTodos);\n  };\n\n  const removeOneTodo = useCallback((id: number) => {\n    setIsRemoveOneTodoLoading(true);\n    client.delete(`/todos/${id}`)\n      .catch(() => {\n        setHasDeleteTodoError(true);\n        setHideErrors(false);\n      })\n      .finally(() => {\n        setIsRemoveOneTodoLoading(false);\n        if (!hasDeleteTodoError) {\n          setTodos(prev => prev\n            .filter(prevTodo => prevTodo.id !== id));\n        }\n      });\n  }, []);\n\n  const removeAllDoneTodo = () => {\n    todos.forEach(todo => {\n      if (todo.completed) {\n        setIsRemovingAllDone(true);\n        client.delete(`/todos/${todo.id}`)\n          .catch(() => setHasDeleteTodoError(true))\n          .finally(() => {\n            setIsRemovingAllDone(false);\n            if (!hasDeleteTodoError) {\n              setTodos(prev => prev\n                .filter(prevTodo => prevTodo.id !== todo.id));\n            }\n          });\n      }\n    });\n  };\n\n  const toHideErrors = () => {\n    setHideErrors(true);\n  };\n\n  const hasUpdateError = useCallback(\n    (condition: boolean) => setHasUpdateTodoError(condition),\n    [],\n  );\n\n  const updateStateTodos = (todo: Todo) => {\n    setTodos(prev => prev.map(prevTodo => {\n      if (prevTodo.id === todo.id) {\n        // eslint-disable-next-line no-param-reassign\n        prevTodo = {\n          ...prevTodo,\n          completed: todo.completed,\n        };\n      }\n\n      return prevTodo;\n    }));\n  };\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <header className=\"todoapp__header\">\n          <button\n            data-cy=\"ToggleAllButton\"\n            type=\"button\"\n            className={classNames(\n              'todoapp__toggle-all', { active: areAllCompleted },\n            )}\n            onClick={updateAllTodos}\n          />\n\n          <form\n            onSubmit={(event) => event.preventDefault()}\n          >\n            <input\n              data-cy=\"NewTodoField\"\n              type=\"text\"\n              ref={newTodoField}\n              className=\"todoapp__new-todo bulma-loader-mixin\"\n              placeholder=\"What needs to be done?\"\n              value={inputDataOfTodo}\n              onChange={(event) => {\n                setInputDataOfTodo(event.target.value);\n                setHideErrors(true);\n              }}\n              onKeyUp={addingTodoToList}\n            />\n          </form>\n        </header>\n\n        <section className=\"todoapp__main\" data-cy=\"TodoList\">\n          {preparedTodosToShow.map(todo => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              removeOneTodo={removeOneTodo}\n              hasUpdateError={hasUpdateError}\n              isRemoving={isRemoveOneTodoLoading}\n              isRemovingAll={isRemovingAllDone}\n              updateStateTodos={updateStateTodos}\n            />\n          ))}\n\n          {isLoading && <ItemBeforeAdding text={inputDataOfTodo} />}\n        </section>\n\n        {todos.length > 0 && (\n          <Footer\n            countOfActiveTodo={countOfActiveTodo}\n            countOfDoneTodo={countOfDoneTodo}\n            removeAllDoneTodo={removeAllDoneTodo}\n            sortType={sortType}\n            sortingTodos={sortingTodos}\n          />\n        )}\n      </div>\n\n      <ErrorNotification\n        errorMsgTodo={errorMsgTodo}\n        hasLoadingTodoError={hasLoadingTodoError}\n        hasDeleteTodoError={hasDeleteTodoError}\n        hasUpdateTodoError={hasUpdateTodoError}\n        hideErrors={hideErrors}\n        toHideErrors={toHideErrors}\n      />\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\n// Add more methods here\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\nimport { AuthProvider } from './components/Auth/AuthContext';\n\nconst Root: React.FC = () => (\n  <AuthProvider>\n    <App />\n  </AuthProvider>\n);\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}